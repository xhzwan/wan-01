// 本地版本控制系统
// 特点：使用软件来记录文件的不同版本，提高了工作效率， 降低了手动维护版本的出错率
// 缺点：单机运行，不支持多人协作开发 版本数据库故障后，所有历史更新记录会丢失

// 集中化版本
//特点 服务器保存文件的更新记录  客户端保留最新的文件版本
//缺点 不支持离线   中心服务器崩溃  所有人无法工作   版本数据库故障 所有历史记录都没有


// 分布式   git
// 服务器保存文件所有更新版本   客户端是服务器的完整备份 并不是只保留文件最新版本
// 联网运行 多人写作 客户端断网支持本地离线提交版本更新
// 服务器故障损坏 可以使用任何一个客户端备份恢复


// git   开源分布式版本控制系统
// 特点  直接记录快照 不是差异比较   所有操作都是本地执行


// 传统的版本控制系统（例如 SVN）是基于差异的版本控制
// 好处：节省磁盘空间   缺点：耗时、效率低

// Git 快照是在原有文件版本的基础上重新生成一份新的文件，类似于备份。
// 特点：空间换时间   // 缺点：占用磁盘空间较大
// 优点：版本切换时非常快，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可。
// 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。
// 特性：断网后依旧可以在本地对项目进行版本管理  联网后，把本地修改的记录同步到云端服务器即可
// 使用 Git 管理的项目，拥有三个区域，分别是工作区、暂存区、Git 仓库。
// 三种状态:
// 已修改 modified    工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。
// 已暂存 staged      如果文件已修改并放入暂存区，就属于已暂存状态。
// 已提交 committed   如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。


// git config --golbal user.name   设置用户名
// git config --golbal user.email   设置邮箱
// git config  --list --golbal     查看全局配置项

// git init  初始化位置


// git status  获取状态  git status -s 简短的状态
//  ？？表示未追踪
// clear  清空
// git add  文件名   添加文件被git管理
// git add .    一次性提交多个
// add 作用
// 添加新文件     文件做了修改本地提交  多人合并代码后解决冲突后还要提交
// A 表示当前文件处于追踪文件
// git commit -m  "新建了html文件"   添加文件到暂存区
// M 表示已经修改
// git checkout --文件名
// git commit -a -m 跳过暂存区提交
// git reset HEAD 取消的文件
// git rm -f  移除文件
// 只移除仓库 保留本地 git rm -- cached 你要移除的文件名


// .gitignore
// 忽略 ,a文件     *.a
// !lib.a  跟踪所有lib.a  即便前面忽略.a

// 查看提交历史   git log
// git log -2 最新两次的提交记录
// git log -2 --pretty=online  一行展示
// git log :"%h(简写哈希值) | %an（作者）| %ar（修订日期）| %s提交说明"


// 回退到指定版本
// git log --pretty=oneline
// git reset --hard<commit ID>
// git reflog --pretty=oneline
